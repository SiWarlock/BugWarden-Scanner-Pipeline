"""Vulnerability data models."""

from typing import Optional, List, Dict, Any
from datetime import datetime
from uuid import UUID, uuid4
from enum import Enum

from pydantic import BaseModel, Field

from vulnhunter.config.settings import SeverityLevel


class VulnerabilityType(str, Enum):
    """Common vulnerability types based on SWC registry."""
   
    # Access Control
    UNPROTECTED_ETHER = "unprotected-ether-withdrawal"
    UNPROTECTED_SELFDESTRUCT = "unprotected-selfdestruct"
    ACCESS_CONTROL = "access-control"
    
    # Reentrancy
    REENTRANCY = "reentrancy"
    CROSS_FUNCTION_REENTRANCY = "cross-function-reentrancy"
    
    # Arithmetic
    INTEGER_OVERFLOW = "integer-overflow"
    INTEGER_UNDERFLOW = "integer-underflow"
    
    # Gas & DoS
    UNBOUNDED_LOOPS = "unbounded-loops"
    DOS_GAS_LIMIT = "dos-gas-limit"
    DOS_REVERT = "dos-revert"
    
    # Bad Randomness
    WEAK_RANDOMNESS = "weak-randomness"
    
    # Front Running
    FRONT_RUNNING = "front-running"
    TRANSACTION_ORDER = "transaction-order-dependency"
    
    # Time Manipulation
    TIMESTAMP_DEPENDENCE = "timestamp-dependence"
    
    # Unchecked Calls
    UNCHECKED_CALL = "unchecked-call-return"
    UNCHECKED_SEND = "unchecked-send"
    
    # Denial of Service
    UNEXPECTED_ETHER = "unexpected-ether-balance"
    DELEGATECALL = "delegatecall-to-untrusted"
    
    # Bad Coding Patterns
    FLOATING_PRAGMA = "floating-pragma"
    OUTDATED_COMPILER = "outdated-compiler"
    SHADOWING = "shadowing-state-variables"
    
    # Logic Errors
    LOGIC_ERROR = "business-logic"
    ORACLE_MANIPULATION = "oracle-manipulation"
    FLASH_LOAN = "flash-loan-attack"
    
    # Other
    UNKNOWN = "unknown"


class VulnerabilityLocation(BaseModel):
    """Location of vulnerability in source code."""
    
    file_path: str
    start_line: int
    end_line: int
    start_column: Optional[int] = None
    end_column: Optional[int] = None
    code_snippet: Optional[str] = None
    

class Finding(BaseModel):
    """Raw finding from an analysis tool."""
    
    tool: str
    title: str
    description: str
    vulnerability_type: VulnerabilityType
    severity: SeverityLevel
    confidence: float = Field(ge=0.0, le=1.0, description="Confidence score 0-1")
    location: Optional[VulnerabilityLocation] = None
    raw_output: Optional[Dict[str, Any]] = None
    

class Vulnerability(BaseModel):
    """Aggregated and validated vulnerability."""
    
    id: UUID = Field(default_factory=uuid4)
    swc_id: Optional[str] = Field(None, description="SWC Registry ID (e.g., SWC-107)")
    owasp_id: Optional[str] = Field(None, description="OWASP Smart Contract Top 10 ID")
    
    title: str
    description: str
    vulnerability_type: VulnerabilityType
    severity: SeverityLevel
    confidence: float = Field(ge=0.0, le=1.0)
    
    # Location info
    locations: List[VulnerabilityLocation] = Field(default_factory=list)
    affected_contracts: List[str] = Field(default_factory=list)
    affected_functions: List[str] = Field(default_factory=list)
    
    # Detection info
    detected_by: List[str] = Field(default_factory=list, description="Tools that found this")
    findings: List[Finding] = Field(default_factory=list, description="Raw findings")
    
    # Additional context
    cvss_score: Optional[float] = Field(None, ge=0.0, le=10.0)
    exploit_scenario: Optional[str] = None
    remediation: Optional[str] = None
    references: List[str] = Field(default_factory=list)
    
    # Multi-contract context
    cross_contract: bool = Field(default=False, description="Involves multiple contracts")
    interaction_chain: Optional[List[str]] = Field(None, description="Contract interaction chain")
    
    # Timestamps
    discovered_at: datetime = Field(default_factory=datetime.now)
    validated: bool = False
    

class ValidatedExploit(BaseModel):
    """Proof-of-concept exploit for a vulnerability."""
    
    vulnerability_id: UUID
    exploit_type: str = Field(description="Type of exploit (e.g., reentrancy, overflow)")
    
    # PoC details
    poc_code: str = Field(description="Solidity/Foundry test code")
    setup_instructions: Optional[str] = None
    
    # Execution results
    executed: bool = False
    execution_success: bool = False
    execution_logs: Optional[str] = None
    
    # Impact
    funds_at_risk: Optional[float] = Field(None, description="ETH/USD value at risk")
    affected_users: Optional[int] = None
    
    # Test environment
    test_network: str = Field(default="anvil-fork", description="Network used for testing")
    block_number: Optional[int] = None
    gas_used: Optional[int] = None
    
    # Validation
    validated_at: datetime = Field(default_factory=datetime.now)
    validation_notes: Optional[str] = None